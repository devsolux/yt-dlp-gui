name: Build & Release

# Trigger on version tags like v1.0.0
on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write   # needed to create releases / upload assets

env:
  APP_NAME: YT-DLP-GUI

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: [3.12]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Upgrade pip and setuptools
        run: python -m pip install --upgrade pip setuptools wheel

      # Install tkinter on Linux (Ubuntu) using apt (python3-tk)
      - name: Install python3-tk on Ubuntu (best-effort)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tk-dev tcl-dev || true
        shell: bash

      # Install tcl-tk on macOS (best-effort) so tkinter is available
      - name: Install tcl-tk on macOS (best-effort)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install tcl-tk || true
          # Try to make Homebrew tcl-tk visible in session (may or may not be needed)
          if [ -d "/opt/homebrew/opt/tcl-tk/bin" ]; then
            export PATH="/opt/homebrew/opt/tcl-tk/bin:$PATH"
          elif [ -d "/usr/local/opt/tcl-tk/bin" ]; then
            export PATH="/usr/local/opt/tcl-tk/bin:$PATH"
          fi
        shell: bash

      - name: Install build dependencies (PyInstaller)
        run: python -m pip install pyinstaller

      - name: Install package
        run: python -m pip install -r requirements.txt

      - name: Install package (editable)
        run: python -m pip install -e .

      - name: Verify tkinter import (cross-platform)
        run: |
          python -c "import tkinter; print('tkinter imported, TclVersion=' + str(getattr(tkinter,'TclVersion',None)))"

      - name: Run build
        run: python build.py

      - name: Upload dist as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist

  release:
    name: Create Release and upload assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-ubuntu-latest
          path: artifacts/ubuntu

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-windows-latest
          path: artifacts/windows

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-macos-latest
          path: artifacts/macos

      - id: create_release
        name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: "Automated build for ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets (all files from artifacts/)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          set -e
          for f in $(find artifacts -type f); do
            filename=$(basename "$f")
            echo "Uploading $f as $filename ..."
            curl -sS -X POST "$UPLOAD_URL?name=$filename" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$f"
            echo
          done